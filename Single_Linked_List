#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct data{
	
	int age;
	struct data *next; // akan menyimpan alamat data selanjutnya
	
};

struct data *create_node(int age){
	
	// dynamic memory allocation
	struct data *new_node = (struct data*) malloc(sizeof(struct data));
	new_node -> next = NULL;
	new_node -> age = age;
	
	return new_node;
}

struct data *push_tail(struct data *head, int age){
	struct data *new_node = create_node(age);
	struct data *temp;
	temp = head;
	
	while(temp -> next != NULL){
		temp = temp -> next;
	}
	
	// hubungkan node terakhir di list ke node baru
	temp -> next = new_node;
	
	return head;
}

struct data *push_head(struct data *head, int age){
	
	struct data *new_node = create_node(age);
	new_node -> next = head;
	
}

struct data *push_mid(struct data *head, int age){
	
	struct data *new_node = create_node(age);
	struct data *temp;
	temp = head;
	
	int len = 0;
	int mid = 0;
	
	// mencari panjang linked list
	while(temp != NULL){
		len++;
		temp = temp -> next;
	}
	
	// mencari mid
	if(mid % 2 == 0){
		mid = len / 2;
	} else{
		mid = (len + 1) / 2;
	}
	
	// mengembalikan temp ke head
	temp = head;
	
	// menggeser temp ke 1 sebelum mid
	while(mid-- > 1){
		temp = temp -> next;
	}
	
	// menghubungkan linked list 
	new_node -> next = temp -> next;
	temp -> next = new_node;
	
}

// delete node
struct data *pop_head(struct data *head){
	
	struct data *temp;
	temp = head;
	head = head -> next;
	temp -> next = NULL;
	free(temp);
	
	return head;
}

struct data *pop_tail(struct data *head){
	
	struct data *temp;
	struct data *curr;
	temp = head;
	curr = head;
	
	while(curr -> next != NULL){
		temp = curr;
		curr = curr -> next;
	}
	
	temp -> next = NULL;
	free(curr);
	
	return head;
}

void print_linked_list(struct data *head){
	
	struct data *temp;
	temp = head;
	int count = 1;
	while(temp != NULL){
		printf("data ke - %d : %d\n", count, temp -> age);
		temp = temp -> next;
		count++;
	}
	
}

int main(){
	
	struct data *head = NULL;
	head = create_node(10);
	head = push_tail(head, 20);
	head = push_head(head, 5);
	
	head = pop_head(head);
	head = pop_tail(head);
	
	print_linked_list(head);
	
	return 0;
}
